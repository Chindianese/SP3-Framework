#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexColor;
layout(location = 2) in vec3 vertexNormal_modelspace;
layout(location = 3) in vec2 vertexTexCoord;

// Output data ; will be interpolated for each fragment.
out vec3 vertexPosition_cameraspace;
out vec3 fragmentColor;
out vec3 vertexNormal_cameraspace;
out vec3 vertexPosition_modelspace_O;
out vec2 texCoord;
out vec4 shadowCoord;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 MV;
uniform mat4 MV_inverse_transpose;
uniform bool lightEnabled;
uniform mat4 lightDepthMVP;
uniform float vert_et;
uniform float distFromPlayer;

void main(){
	vertexPosition_modelspace_O = vertexPosition_modelspace;
	gl_Position =  MVP * vec4(vertexPosition_modelspace_O, 1);
	// Vector position, in camera space
	vertexPosition_cameraspace = ( MV * vec4(vertexPosition_modelspace_O, 1) ).xyz;
	// sway
	if(vertexPosition_modelspace.y > 0.3f) // min height
	{
		gl_Position.x += sin(0.6f * vert_et) * .5f * pow(vertexPosition_modelspace_O.y,1.f);
	
		// push away
		vec3 Player_CameraSpace = vec3(0,0,-distFromPlayer);
		vec3 PlayerToV =  vertexPosition_cameraspace - Player_CameraSpace;
		float dist = length(PlayerToV);
		if( dist < 1.5f )
		{
			gl_Position.y -= 0.5f;
		}
	}

	// Output position of the vertex, in clip space : MVP * position

	if(lightEnabled == true)
	{
		// Vertex normal, in camera space
		// Use MV if ModelMatrix does not scale the model ! Use its inverse transpose otherwise.
		vertexNormal_cameraspace = ( MV_inverse_transpose * vec4(vertexNormal_modelspace, 0) ).xyz;

		// Output position of the vertex, in light space : lightDepthMVP * position
		shadowCoord = lightDepthMVP * vec4(vertexPosition_modelspace_O, 1);
		shadowCoord = shadowCoord / shadowCoord.w;
		shadowCoord.xyz = shadowCoord.xyz * 0.5 + 0.5;
	}
	// The color of each vertex will be interpolated to produce the color of each fragment
	fragmentColor = vertexColor;
	// A simple pass through. The texCoord of each fragment will be interpolated from texCoord of each vertex
	texCoord = vertexTexCoord;
}

